#!/bin/bash
set -e

# Add the following to bashrc to enable completion:
#
#   complete -C zet zet
#
# Note that you will need one such complete line for every multicall
# variation of this script (ex: ln -s zet log; complete -C log log)

[[ -z "$KN" ]] && echo "KN (knowledge directory) not set." && exit 1
[[ -z "$GITUSER" ]] && echo "GITUSER not set." && exit 1

EXE=${0##*/}
[[ -z "$EXE" ]] && echo "Could not determine name of executable." && exit 1

declare -a commands=( query lquery add )

# Add creates a Zettelkasten repo entry with an isosec unique directory
# name within the $KN/$EXE parent directory. Whatever the effective name
# of the executable (multicall, symlink, hardlink, alias, copy) will be
# used for $EXE. Opens editor with $EDITOR or vim.  Git commits using
# the first 50 characters of the first line (ignoring heading hashtags
# if prefixed) and pushes. Designed to be used in situations where
# commiting and pushing to main/master is allowed (which is usually fine
# for knowledge repos).

_add() {
  [[ ! -d "$KN/$EXE" ]] && echo "Directory not found: $KN/$EXE" && exit 1
  dir="$KN/$EXE/$(isosec)"
  mkdir -p "$dir"
  ${EDITOR:-vim} "$dir/README.md"
  cd "$dir"
  [[ ! -e "$dir/README.md" ]] && rmdir "$dir"
  line=$(head -1 "$dir/README.md" | sed 's/#\+ *//')
  [[ -n "$line" ]]
  echo "Adding: $line"
  git add -A "$dir"
  git commit -m "$line"
  git push
}

_query() {
  [[ -z "$1" ]] && echo "Missing search query." && exit 1
  type urlencode >/dev/null 2>&1
  term="$*"
  it="https://github.com/$GITUSER/$EXE/search?q=$(urlencode "$term")"
  ${BROWSER:-echo} "$it"
  echo "[$term]: <$it>"
}

_lquery() {
  [[ -z "$1" ]] && echo "Missing local search query." && exit 1
  term="$*"
  echo "[$term]"
  mapfile -t grepResult < <(grep -iPTr -m 1 --exclude-dir='.git' "$*" "$KN/zet/")
  select c in "${grepResult[@]}"; do
    ${EDITOR:-vim} "${c%%:*}"
    return "$?"
  done
}

# Tab completetion taken from rwxrob. rwxrob.tv
# add `complete -C <script name> <script name>` to your .bashrc
if [[ -n $COMP_LINE ]]; then
  for c in "${commands[@]}"; do
    [[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
  done
  exit "$?"
fi

# Delegation
if [[ -n "$1" ]]; then
  declare cmd="$1"; shift
  for c in "${commands[@]}"; do
    [[ $c == "$cmd" ]] && "_$cmd" "$@" && exit "$?"
  done
fi
